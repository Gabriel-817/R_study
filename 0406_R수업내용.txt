
★ 2020년 4월 6일 수업 내용 ★

* R 및 Rstudio 설치 
https://cran.rstudio.com
https://rstudio.com/


* jupyter에서 r 쓸 수 있도록 환경 만들어주기 (주피너 노트북 R 커널 설치) 
=> anaconda propmt 관리자 권한으로 실행 
=> 
$conda install -c anaconda ipython-notebook
$conda install -c r r-irkernel


* vscode에서 r 설치

ctrl shift p 
=> user settings 
=> extensions 
=> r
=> windows 


* 아나콘다 가상환경 목록 확인 
$conda env list
=> base : conda 깔리면 자동으로 깔려지는 것 

* 파이썬 버전 확인 
$python -V 

* 아나콘다 가상환경 생성 
$conda create -n test python=3

* 아나콘다 가상환경 활성화 
$conda activate test 

* 아나콘다 가상환경 비활성화 
$conda deactivate  

* 아나콘다 패키지 설치 
$conda install tensorflow-gpu 

* 아나콘다 가상환경 삭제 
$conda enx remove -n test 


* R studio 실습 * 

a<-1 # a라는 변수에 1이라는 값 대입 
 
ls() # 현재 메모리에 올라와있는 것들의 리스트를 출력해 줌
 
* Rstudio에서의 주석은 # 사용 

* 연산자는 파이썬과 거의 동일 

var1<-c(1,2,5,7,8) # 하나의 변수에 여러 값 대입 

var2<-c(1:5) # 1부터 5까지 1씩 증가되는 형태로 데이터 임의 생성 


var3<-seq(1,5) # sequence 함수 : 1부터 5까지 

var5<-seq(1,10, by=3) # 1부터 10까지, 3씩 증가 

var5<-seq(1,10,by=2) 

var1+2 # var1 : 1 3 5 7 8 이었는 데, var1의 각각의 값에 2가 더해진 결과가 나옴 3 4 7 9 10 

str3 <- "Hello World!" 

str5 <- c("Hello!", "World", "is", "good!") 

str5+2 # 문자열에 산술연산자 쓰면 에러남

x<-c(1,2,3)
mean(x)
max(x)
min(x)
 
paste(str5, collapse = ",") # 합쳐주는 작업을 할 때 배열로 되어있는 애들을 ,를 이용해 합침 
# 실행 결과 
> paste(str5, collapse = ",")
[1] "Hello!,World,is,good!"


?paste # 함수명(?) 앞에 ? 쓰면, 오른쪽 아래 창에서 함수에 대한 설명 볼 수 있음 

install.packages("ggplot2") # 패키지 설치 install.packages("패키지명") 


library(ggplot2) # ggplot 패키지 로드 # 주의 사항 : ""쓰면 안됨! 

x<-c("a","a","b","c")
qplot(x) # 그래프 그리기 

qplot(data=mpg, x = hwy) # data에 mpg, x축에 hwy 변수 지정하여 그래프 생성 
				# mpg는 r에서 기본적으로 제공되는 데이터 

?qplot # qplot 사용법 참고하기 


# 시험 점수 변수 만들고 출력하기 
score <- c(80,60,70....) 

# 전체 평균 구하기 
mean(score) 

# 전체 평균 변수 만들고 출력하기 
mean_score <- mean(score)
print(mean_score) 


require(패키지명) # library() 함수와 유사, 주로 함수 안에서 사용함 

detach("package:패키지명", unload=TRUE)  # 패키지를 언로드 하기 위해서 detach()함수를 사용함 

변수명 만들 때 규칙 
- 첫 글자는 알파벳 또는 '.'로 시작해야함 
- '.'로 시작 시 바로 뒤에는 숫자가 올 수 없으며, 히든(hidden) 변수가 됨 

변수 할당 연산자 <-, ->(왼쪽 값을 오른쪽에 할당) , =, <<-, ->>

변수 조회 
ls()
ls.str() # 변수의 이름과 구조를 표시 
ls(all.names=TRUE) # hidden 변수도 표시해 줌 

변수/ 값 삭제 
rm(varA) # varA 변수 삭제 
rm(list=c('varA', 'varB')) # varA, varB 변수 삭제 
rm(list=ls(all=TRUE)) # 메모리에 로딩되어있는 모든 변수 삭제 



데이터 프레임 만들기 
english <- c(90, 80,....)

math <- c(40,60,...)

df_midterm <- data.frame(english, math) # 데이터 프레임 생성 


class <- c(1,1,2,2) 
df_midterm <- data.frame(english, math, class) 
df_midterm


# 실습 1 : data.frame()과 c()를 조합해서 표의 내용을 데이터 프레임으로 만들어 출력해보세요 
# 실습 2 : 실습 1에서 만든 데이터 프레임을 이용해서 과일 가격 평균, 판매량 평균을 구해보세요 

product <- c("사과", "딸기", "수박") 
price <- c(1800, 1500, 3000) 
sale <- c(24, 38, 13) 

df_ <- c(product, price, sale) 
mean(df_$price) 
mean(df_$sale) 


#############################################################


* readxl 패키지 설치 
install.packages("readxl") 

library(readxl) # readxl 패키지 로드 

df_exam <- read_excel("excel_exam.xlsx") 
df_exam 

mean(df_exam$english)

df_exam_novar <- read_excel("exam_novar.xlsx", col_names = F) # 엑셀 파일에 컬럼명이 없을 경우 col_names = F 
df_exam_novar 



df_exam_sheet <- read_excel("excel_exam_sheet.xlsx", sheet=3 ) # 한 파일에 sheet가 여러개 있다면 
df_exam_sheet


df_csv_exam <- read.csv("csv_exam.csv", stringsAsFactors = F) # 문자가 있는 파일을 불러올 때는 stringsAsFactors = F
df_csv_exam 



### R 교재 내용 

## 외부 데이터 이용하기

# 엑셀 파일 
library(readxl) # readxl 패키지 로드
df_exam <- read_excel("excel_exam.xlsx") # 엑셀 파일 불러오기

# csv 파일 
df_csv_exam <- read.csv("csv_exam.csv") # csv 파일 불러오기
write.csv(df_midterm, file = "df_midterm.csv") # csv 파일로 저장하기

# Rda 파일 
load("df_midterm.rda") # Rda 파일 불러오기
save(df_midterm, file = "df_midterm.rda") # Rda 파일로 저장하기 


## 데이터를 파악할 때 사용하는 함수들

	함수 / 기능
	head() / 데이터 앞부분 출력
	tail() / 데이터 뒷부분 출력
	View() / 뷰어 창에서 데이터 확인
	dim() / 데이터 차원 출력
	str() / 데이터 속성 출력
	summary() / 요약 통계량 출력



	출력값 / 통계량 / 설명
	MIn / 최솟값 / 가장 작은 값
	1st Qu / 1사분위수 / 하위 25%(4분의1) 지점에 위치하는 값
	Median / 중앙값 / 중앙에 위치하는 값
	Mean / 평균 / 모든 값을 더해 값의 개수로 나눈 값
	3rd Qu / 3사분위수 / 하위 75%(4분의 3) 지점에 위치하는 값
	Max / 최댓값 / 가장 큰 값




df_midterm <- data.frame(english = c(90, 80, 60, 70), math = c(50,60,100,20), class = c(1,1,2,2)) 
write.csv(df_midterm, file = "df_midterm.csv") 




############

df_midterm<- data.frame(english=c(90,80,60,70),
                        math = c(50,60,100,20),
                        class = c(1,1,2,2))
df_midterm

write.csv(df_midterm, file = "df_midterm.csv")

saveRDS(df_midterm, file = "df_midterm.rds")

rm(df_midterm)

df_midterm

df_midterm <- readRDS("df_midterm.rds")
df_midterm

# exam 데이터 파악
exam <- read.csv("csv_exam.csv")
# 앞에서 6행
head(exam)
# 앞에서 10행
head(exam, 10)
# 뒤에서 6행
tail(exam)
# 뒤에서 10행
tail(exam, 10)
# 뷰어 창에서 데이터 확인
View(exam)
# 행, 렬
dim(exam)
# 데이터 속성 확인
str(exam)

# 요약 통계량 출력 # 신뢰 구간 내의 최댓값, 최솟값 보여줌(판다스와 다른 점!) 
summary(exam)

# mpg 데이터 파악하기
# ggplot2의 mpg데이터를 데이터 프레임  형태로 불러오기
mpg <- as.data.frame(ggplot2::mpg)

# Raw 데이터 앞부분 확인
head(mpg)

# Raw 데이터 뒷부분 확인
tail(mpg)

# Raw 데이터 뷰어 창에서 확인
View(mpg)

# 행, 열 출력
dim(mpg)

# 데이터 속성 확인 # num : pandas에서 float, chr : character  
str(mpg)

# 요약 통계량 출력
summary(mpg)

# 변수 명 바꾸기
df_raw <- data.frame(var1 = c(1,2,1),
                     var2 = c(2,3,2))
df_raw
install.packages("Rcpp") # (dplyr 설치 안될 경우!) 주피터에서 install하려면 "Rcpp" install하기 
install.packages("dplyr") # 패키지 설치 
library(dplyr) # dplyr 로드 

df_new <- df_raw # 복사본 생성

# 출력
df_new

df_new <- rename(df_new, v2= var2) # var2를 v2로 수정 # rename()에 '새 변수명 = 기존 변수명' 순서로 입력 
df_new

?ls

########## 예제 
mpg <- as.data.frame(ggplot2::mpg)
# 복사본 생성
new_mpg <- mpg
new_mpg <- rename(new_mpg, city = cty, highway = hwy)
head(new_mpg)


######################
# 파생변수 만들기
df <- data.frame(var1 = c(4,3,8),
                 var2 = c(2,6,1))
df

# var_sum 파생변수 생성
df$var_sum <- df$var1 + df$var2
df

# var_mean 파생변수 생성
df$var_mean <- (df$var1 + df$var2)/2
df

# 통합 연비 변수 생성
mpg$total <- (mpg$cty + mpg$hwy)/2
head(mpg)

 
# 통합 연비 변수 평균
mean(mpg$total)

# 요약 통계량 산출
summary(mpg$total)

# 히스토그램 생성
hist(mpg$total)

# 20 이상이면 pass, 그렇지 않으면 fail 부여
mpg$test <- ifelse(mpg$total >= 20, "pass", "fail")
# 데이터 확인
head(mpg,20)
tail(mpg)

# 연비 합격 빈도표 생성
table(mpg$test)


# ggplot2 로드
library(ggplot2)
# 연비 합격 빈도 막대그래프 생성
qplot(mpg$test)

#  등급 조건문 설정
mpg$grade <- ifelse(mpg$total >= 30, "A",
                    ifelse(mpg$total>=20, "B", "C"))
head(mpg)

# 등급 빈도표 생성
table(mpg$grade)

# 등급 빈도 막대 그래프 생성
qplot(mpg$grade)

# A,B,C,D 등급 부여
mpg$grade2 <- ifelse(mpg$total >= 30, "A",
                     ifelse(mpg$total >= 25, "B",
                            ifelse(mpg$total >= 20, "C", "D")))

# 등급 빈도 막대 그래프 생성
qplot(mpg$total)



# 분석 도전! p123
# 문제1
midwest <- as.data.frame(ggplot2::midwest)
str(midwest)

# 문제2
library(dplyr)
midwest <- rename(midwest, total= poptotal, asian = popasian)
head(midwest)

# 문제3
midwest$ratio <- midwest$asian/midwest$total*100
hist(midwest$ratio)

# 문제4
mean(midwest$ratio)
midwest$group <- ifelse(midwest$ratio > 0.4872462, "large", "small")

# 문제5
# 등급 빈도표 생성
table(midwest$group)
# 등급 빈도 막대 그래프 생성
qplot(midwest$group)











